package stza.test;

import java.util.Arrays;

class Loops {

    //
//    riangleArray (создание треугольного массива)
//
//    метод должен создать двумерный массив вида:
//
//            [0] -> null | - Нулевая ячейка основного массива с нулём подмассивов. В ней вообще ничего.
//
//            [1] -> [1] | - Первая ячейка основного массива содержит подмассив размером 1(одна ячейка № 0) с цифрой 1 внутри (номер ячейки основного массива).
//
//            [2] -> [2] [2] | - Вторая ячейка основнога массива содержит в себе массив на две ячейки, каждая из которых содержит в себе цифру 2 (номер ячейки основного массива).
//
//            [3] -> [3] [3] [3] | - Третья ячейка основного массива содержит в себе массив размером 3(№ 0,1,2) , а каждая его ячейка цифру 3 (номер ячейки основного массива).
//
//            ... и т.д.
//
//[n] .................. [n]
//
//    где n это число переданное в метод в качестве аргумента.
//
//    Не забываем, что ячейки в массивах считаются с 0
    public int[][] triangleArray(final int limit) {

        int[][] ans = new int[limit][];

        for (int i = 1; i < limit; i++) {
            ans[i] = new int[i];
            for (int j = 0; j < ans[i].length; j++) {
                ans[i][j] = i;
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        System.out.println(Arrays.deepToString(new Loops().triangleArray(3)));
    }

//
//    findIndex (реализация поиска индекса элемента в массиве)
//
//    Данный метод принимает на вход массив и элемент (int). Метод должен найти заданный элемент в массиве и вернуть его индекс ячейки. Например:
//
//            [1, 2, 16, 0, 7, 8] - входящий массив
//16 - входящий элемент
//    метод должен вернуть индекс 2 так как элемент 16 находится по индексу 2 в массиве.
//
//    Если элемент не найден или входящий массив равен null - метод должен вернуть -1
//
//    Не подсказывайте решение в комментариях ;)

    public int findIndex(final int[] m, final int target) {

        int targetIndex = -1;

        if (m != null) {
            for (int i = 0; i < m.length; i++) {
                if (m[i] == target) {
                    targetIndex = i;
                    break;
                }
            }
        }

        return targetIndex;
    }

//
//    Вам предстоит реализовать логику метода replaceElement в классе Loops. replaceElement (реализация замены элементов массива)
//
//    Данный метод на вход принимает массив элементов, элемент a, элемент b. Метод должен выполнить поиск всех нужных (a) элементов в массиве и заменить их на указанный (b). Метод ничего не возвращает.
//
//    Например для входных аргументов:
//
//            [1, 8, 1, -10, 3]
//            1
//            10
//    должна привести массив к следующей форме: [10, 8, 10, -10, 3]

    void replaceElement(final int[] m, final int a, final int b) {

        for (int i = 0; i < m.length; i++) {
            if (m[i] == a){ m[i] = b; }
        }
    }
}

